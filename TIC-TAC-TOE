# Tic-Tac-Toe with an unbeatable AI using Minimax

# Initialize the game board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Function to print the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Check if there's a winner
def check_winner(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]
    return None

# Check if the game is a draw
def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

# Minimax algorithm to evaluate moves
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':  # Human player
        return -10 + depth
    elif winner == 'O':  # AI player
        return 10 - depth
    elif is_draw(board):  # Draw
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'  # AI move
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'  # Human move
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

# Determine the AI's best move
def best_move(board):
    best_score = float('-inf')
    move = (-1, -1)  # Default move
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'  # AI move
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    
    return move

# Main game loop
def play_game():
    print("Welcome to Tic-Tac-Toe!")
    print("You are X, and the AI is O.")
    
    while True:
        print_board(board)
        
        # Human player's turn
        while True:
            try:
                x, y = map(int, input("Enter your move (row and column: 0-2): ").split())
                if board[x][y] == ' ':
                    board[x][y] = 'X'
                    break
                else:
                    print("Cell already occupied! Try again.")
            except (ValueError, IndexError):
                print("Invalid input! Please enter row and column (0-2).")
        
        # Check if the human player wins or it's a draw
        if check_winner(board) or is_draw(board):
            break
        
        # AI's turn
        ai_x, ai_y = best_move(board)
        board[ai_x][ai_y] = 'O'
        
        # Check if the AI wins or it's a draw
        if check_winner(board) or is_draw(board):
            break
    
    print_board(board)
    
    # Determine the result of the game
    winner = check_winner(board)
    if winner == 'X':
        print("Congratulations! You win!")
    elif winner == 'O':
        print("AI wins! Better luck next time.")
    else:
        print("It's a draw!")

# Start the game
play_game()
